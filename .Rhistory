# Plot ACF and PACF for First difference
par(mfrow=c(1,2))
acf(ASX.first, lag.max = 48,
main = "Australian Share Market \nSample ACF (first Difference)")
Pacf(ASX.first, lag.max = 48,
main = "Australian Share Market \nSample PACF (first Difference)")
ASX.dc = stl(ASX.ts, t.window=15, s.window="periodic", robust=TRUE)
plot(ASX.dc)
plot(ASX.ts,main='Ordinaries (Ords) Price Index, \nAustralian Share Market, 2003-2017',
ylab='Ordinaries (Ords) Price Index',xlab='Year')
ASX.dc = stl(ASX.ts, t.window=15, s.window="periodic", robust=TRUE)
plot(ASX.dc,main='Ordinaries Price Index - STL Decomposition, \nAustralian Share Market, 2003-2017',
ylab='Ordinaries (Ords) Price Index',xlab='Year')
par(mfrow=c(1,1))
plot(ASX.dc,main='Ordinaries Price Index - STL Decomposition, \nAustralian Share Market, 2003-2017',
ylab='Ordinaries (Ords) Price Index',xlab='Year')
ASX.dc = stl(ASX.ts, t.window=15, s.window="periodic", robust=TRUE)
par(mfrow=c(1,1))
plot(ASX.dc,main='Ordinaries Price Index - STL Decomposition, \nAustralian Share Market, 2003-2017',
xlab='Year')
plot(ASX.dc,main='Ordinaries Price Index - STL Decomposition, \nAustralian Share Market, 2003-2017')
# Fitting time series for STL decomposition
ASX.dc = stl(ASX.ts, t.window=15, s.window="periodic", robust=TRUE)
# Plot Graph
par(mfrow=c(1,1))
plot(ASX.dc,main='Ordinaries Price Index - STL Decomposition \nAustralian Share Market, 2003-2017')
# Fitting time series for STL decomposition
ASX.dc = stl(ASX.ts, t.window=15, s.window="periodic", robust=TRUE)
# Plot Graph
par(mfrow=c(1,1))
plot(ASX.dc,main='Ordinaries Price Index - STL Decomposition \nAustralian Share Market, 2003-2017')
# Fitting time series for STL decomposition
ASX.dc = stl(ASX.ts, t.window=15, s.window="periodic", robust=TRUE)
# Plot Graph
par(mfrow=c(1,1))
plot(ASX.dc,main='Ordinaries Price Index - STL Decomposition \nAustralian Share Market, 2003-2017')
# Fitting time series for STL decomposition
ASX.dc = stl(ASX.ts, t.window=11, s.window="periodic", robust=TRUE)
# Plot Graph
par(mfrow=c(1,1))
plot(ASX.dc,main='Ordinaries Price Index - STL Decomposition \nAustralian Share Market, 2003-2017')
# Fitting time series for STL decomposition
ASX.dc = stl(ASX.ts, t.window=7, s.window="periodic", robust=TRUE)
# Plot Graph
par(mfrow=c(1,1))
plot(ASX.dc,main='Ordinaries Price Index - STL Decomposition \nAustralian Share Market, 2003-2017')
# Fitting time series for STL decomposition
ASX.dc = stl(ASX.ts, t.window=15, s.window="periodic", robust=TRUE)
# Plot Graph
par(mfrow=c(1,1))
plot(ASX.dc,main='Ordinaries Price Index - STL Decomposition \nAustralian Share Market, 2003-2017')
# Fitting time series for STL decomposition
ASX.dc = stl(ASX.ts, t.window=21, s.window="periodic", robust=TRUE)
# Plot Graph
par(mfrow=c(1,1))
plot(ASX.dc,main='Ordinaries Price Index - STL Decomposition \nAustralian Share Market, 2003-2017')
# Fitting time series for STL decomposition
ASX.dc = stl(ASX.ts, t.window=NULL, s.window="periodic", robust=TRUE)
# Plot Graph
par(mfrow=c(1,1))
plot(ASX.dc,main='Ordinaries Price Index - STL Decomposition \nAustralian Share Market, 2003-2017')
# Fitting time series for STL decomposition
ASX.dc = stl(ASX.ts, t.window=17, s.window="periodic", robust=TRUE)
# Plot Graph
par(mfrow=c(1,1))
plot(ASX.dc,main='Ordinaries Price Index - STL Decomposition \nAustralian Share Market, 2003-2017')
monthplot(ASX.dc,choice = "trend", main="Seasonal sub-series plot of the
seasonal component of vehicles series", ylab="Tend")
plot(seasadj(ASX.dc))
plot(ASX.dc)
plot(ASX.dc)
plot(ASX.ts)
plot(seasadj(ASX.dc))
ASX.dc[,'trend']
ASX.dc$time.series
ASX.dc$time.series[,'trend']
ASX.dc.trend = ASX.dc$time.series[,'trend']
ASX.dc.adjusted = ASX.ts - ASX.dc.trend
plot(ASX.dc.adjusted)
plot(ASX.ts)
plot(ASX.dc.adjusted)
plot(seasadj(ASX.dc))
points(y=seasadj(ASX.dc),x=time(seasadj(ASX.dc)), pch=as.vector(season(seasadj(ASX.dc))))
plot(seasadj(ASX.dc))
points(y=seasadj(ASX.dc),x=time(seasadj(ASX.dc)), pch=as.vector(season(seasadj(ASX.dc))))
plot(seasadj(ASX.dc))
points(y=seasadj(ASX.dc),x=time(seasadj(ASX.dc)), pch=as.vector(season(seasadj(ASX.dc))))
plot(seasadj(ASX.dc))
points(y=seasadj(ASX.dc),x=time(seasadj(ASX.dc)), pch=as.vector(season(seasadj(ASX.dc))))
# Trend Component extraction from STL decomposition output
ASX.dc.trend = ASX.dc$time.series[,'trend']
# Removing trend from original time series
ASX.dc.adjusted = ASX.ts - ASX.dc.trend
# Plot
plot(ASX.dc.adjusted)
# Trend Component extraction from STL decomposition output
ASX.dc.trend = ASX.dc$time.series[,'trend']
# Removing trend from original time series
ASX.dc.adjusted = ASX.ts - ASX.dc.trend
# Plot
plot(ASX.dc.adjusted)
points(y=ASX.dc.adjusted,x=time(ASX.dc.adjusted), pch=as.vector(season(ASX.dc.adjusted)))
forecasts <- forecast(ASX.dc, method="naive")
plot(forecasts, ylab="New orders index")
forecasts
forecasts$model
forecasts$mean
forecasts$mean[1:5]
head(forecasts$mean,5)
forecasts
head(forecasts,5)
head(forecasts$lower,5)
head(forecasts$upper,5)
head(forecasts$lower,5)
head(forecasts$upper,5)
x = head(forecasts$mean,5)
y = head(forecasts$lower,5)
z = head(forecasts$upper,5)
class(y)
y[,1]
y[,2]
y
y[,1]
y[,2]
z[,2]
z
z[,2]
head(forecasts$mean,5)
head(forecasts$lower,5)
head(forecasts$lower,5)[,2]
y = head(forecasts$lower,5)[,2]
z = head(forecasts$upper,5)[,2]
data.entry(y,z)
y = head(forecasts$lower,5)[,2]
z = head(forecasts$upper,5)[,2]
data.entry(y,z)
data.entry(y = head(forecasts$lower,5)[,2],z = head(forecasts$upper,5)[,2])
data.entry(yyyy = head(forecasts$lower,5)[,2],zyyy = head(forecasts$upper,5)[,2])
head(forecasts$lower,5)[,2]
data.entry(yyyy = as.vector(head(forecasts$lower,5)[,2]))
data.entry(yyyy = as.vector(head(forecasts$lower,5)[,2]))
data.frame(yyyy = as.vector(head(forecasts$lower,5)[,2]))
data.frame(yyyy = head(forecasts$lower,5)[,2])
data.frame(yyyy = head(forecasts$lower,5)[,2],z = head(forecasts$upper,5)[,2])
data.frame(Mean = head(forecasts$mean,5), 95%CI = head(forecasts$lower,5)[,2],z = head(forecasts$upper,5)[,2])
data.frame(Mean = head(forecasts$mean,5), '95%CI' = head(forecasts$lower,5)[,2],z = head(forecasts$upper,5)[,2])
data.frame(Mean = head(forecasts$mean,5), '95% CI Lower' = head(forecasts$lower,5)[,2],z = head(forecasts$upper,5)[,2])
data.frame(Mean = head(forecasts$mean,5), '95\% CI Lower' = head(forecasts$lower,5)[,2],z = head(forecasts$upper,5)[,2])
data.frame(Mean = head(forecasts$mean,5), '95% CI Lower' = head(forecasts$lower,5)[,2],z = head(forecasts$upper,5)[,2])
data.frame(Mean = head(forecasts$mean,5), '95% CI Lower' = head(forecasts$lower,5)[,2],'95% CI Upper' = head(forecasts$upper,5)[,2])
a = data.frame(Mean = head(forecasts$mean,5), '95% CI Lower' = head(forecasts$lower,5)[,2],'95% CI Upper' = head(forecasts$upper,5)[,2])
ts(a, start = c(2017,6),frequency = 12)
a = data.frame(Mean = head(forecasts$mean,5), '95 CI Lower' = head(forecasts$lower,5)[,2],'95 CI Upper' = head(forecasts$upper,5)[,2])
ts(a, start = c(2017,6),frequency = 12)
5month.forecast = ts(a, start = c(2017,6),frequency = 12)
months.forecast = ts(a, start = c(2017,6),frequency = 12)
months.forecast
forecast.values = data.frame(Mean = head(forecasts$mean,5),
'95 CI Lower' = head(forecasts$lower,5)[,2],
'95 CI Upper' = head(forecasts$upper,5)[,2])
months.forecast = ts(forecast.values, start = c(2017,6),frequency = 12)
months.forecast
forecasts$mean
months.forecast
forecasts <- forecast(ASX.dc, method="naive")
plot(forecasts, ylab="New orders index")
forecast.values = data.frame(Mean = head(forecasts$mean,5),
'95 CI Lower' = head(forecasts$lower,5)[,2],
'95 CI Upper' = head(forecasts$upper,5)[,2])
months.forecast = ts(forecast.values, start = c(2017,6),frequency = 12)
months.forecast
forecasts <- forecast(ASX.dc, method="naive", h = 5)
plot(forecasts, ylab="New orders index")
forecasts$mean
forecasts
forecasts
forecast.values = data.frame(Mean = forecasts$mean,
'95 CI Lower' = forecasts$lower[,2],
'95 CI Upper' = orecasts$upper[,2])
forecast.values = data.frame(Mean = forecasts$mean,
'95 CI Lower' = forecasts$lower[,2],
'95 CI Upper' = forecasts$upper[,2])
months.forecast = ts(forecast.values, start = c(2017,6),frequency = 12)
months.forecast
forecasts
forecasts <-
plot(naive(ASX.dc, h = 5), ylab="New orders index")
forecasts <-
plot(naive(ASX.dc), ylab="New orders index")
forecasts <- forecast(ASX.dc, method="naive", h = 5)
plot(forecasts, ylab="New orders index")
forecasts
# Forecasting using Naive Method for 5 months
forecasts <- forecast(ASX.dc, method="naive", h = 5)
plot(forecasts, ylab="New orders index")
# 5 months forecasted values with 80% and 95% Confidence Interval
forecasts
plot(seasadj(ASX.dc),
main='Ordinaries Price Index by Month - Seasonally Adjusted
Australian Share Market, 2003-2017',
ylab='Price Index',xlab='Years')
points(y=seasadj(ASX.dc),x=time(seasadj(ASX.dc)), pch=as.vector(season(seasadj(ASX.dc))))
# Forecasting using Naive Method for 5 months
forecasts <- forecast(ASX.dc, method="naive", h = 5)
plot(forecasts,
main='Ordinaries Price Index by Month - Seasonally Adjusted
Australian Share Market, 2003-2017',
ylab='Price Index',xlab='Years')
# Forecasting using Naive Method for 5 months
forecasts <- forecast(ASX.dc, method="naive", h = 5)
plot(forecasts,
main='Ordinaries Price Index by Month - Forecast using STL
Australian Share Market, 2003-2017',
ylab='Price Index',xlab='Years')
4 * 80 + 5 * 70
letters
letters[1:3]
rep(letters[1:3])
rep(letters[1:3],3)
rep(letters[1:3],10)
rep(letters[1:3],each=10)
factor(rep(letters[1:3],each=10))
rnorm(30)
df = (gp = factor(rep(letters[1:3],each=10)),
y = rnorm(30))
df = data.frame(gp = factor(rep(letters[1:3],each=10)),
y = rnorm(30))
df
ds <- plyr::ddply(df, "gp", plyr::summarise, mean = mean(y), sd = sd(y))
ddply
ds
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)
require(tidyverse)
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)
ggplot(df) +
geom_point(aes(gp, y)) +
geom_point(data = ds, aes(gp, mean), colour = 'red', size = 3)
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3) +
geom_errorbar(
data = ds,
aes(gp, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'red',
width = 0.4
)
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3) +
geom_errorbar(
data = ds,
aes(gp, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'red'
)
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3) +
geom_errorbar(
data = ds,
aes(gp, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'red',
width = 0.4
)
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3) +
geom_errorbar(
data = ds,
aes(gp, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'red',
width = 0.2
)
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3) +
geom_errorbar(
data = ds,
aes(gp, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'pint',
width = 0.2
)
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3) +
geom_errorbar(
data = ds,
aes(gp, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'pink',
width = 0.2
)
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3) +
geom_errorbar(
data = ds,
aes(gp, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'red',
width = 0.2
)
ggplot() +
geom_errorbar(
data = ds,
aes(gp, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'red',
width = 0.2
)
ggplot() +
geom_errorbar(
data = ds,
aes(gp, mean),
colour = 'red',
width = 0.2
)
mean
gp
ds
ggplot() +geom_abline(intercept = 0, slope = 1)
ggplot() +geom_abline(intercept = 0, slope = 1) + +geom_abline(intercept = 0, slope = -1)
ggplot() +geom_abline(intercept = 0, slope = 1) + geom_abline(intercept = 0, slope = -1)
ggplot() +geom_abline(intercept = 0, slope = 1) + geom_abline(intercept = 0, slope = -5)
ggplot() +geom_abline(intercept = 0, slope = 1) + geom_abline(intercept = 0, slope = -1)
p <- ggplot(mtcars, aes(wt, mpg)) + geom_point()
p + geom_vline(xintercept = 5)
p + geom_abline(slope = 0, intercept = 5)
p + geom_abline(slope = 0, intercept = 5)
p + geom_vline(xintercept = 5)
p + geom_abline(intercept = 5)
p + geom_vline(xintercept = 1:5)
p + geom_hline(yintercept = 20)
p + geom_hline(yintercept = mean(mpg))
mean(mtcars$mpg
mean(mtcars$mpg)
mean(mtcars$mpg)
p + geom_hline(yintercept = mean(mtcars$mpg))
p + geom_hline(yintercept = mean(mtcars$mpg)) + geom_vline(xintercept = mean(mtcars$mpg))
p + geom_hline(yintercept = mean(mtcars$mpg)) + geom_vline(xintercept = mean(mtcars$wt))
coef(lm(mpg ~ wt, data = mtcars))
lm(mpg ~ wt, data = mtcars)
p + geom_abline(intercept = 37, slope = -5)
coef(lm(mpg ~ wt, data = mtcars))[1]
coef(lm(mpg ~ wt, data = mtcars))[2]
p + geom_abline(intercept = coef(lm(mpg ~ wt, data = mtcars))[1], slope = coef(lm(mpg ~ wt, data = mtcars))[2])
p + geom_smooth(method = "lm", se = FALSE)
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
facet_wrap(~ cyl)
ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
facet_wrap(~ cyl)
mean_wt <- data.frame(cyl = c(4, 6, 8), wt = c(2.28, 3.11, 4.00))
mean_wt
p + geom_hline(aes(yintercept = wt), mean_wt)
p + geom_hline(yintercept = wt, mean_wt)
mean_wt <- data.frame(cyl = c(4, 6, 8), wt = c(2.28, 3.11, 4.00))
p + geom_hline(yintercept = wt, mean_wt)
p + geom_hline(mean_wt,yintercept = wt)
p + geom_hline(yintercept = mean_wt$wt)
p + geom_hline(mean_wt,aes(yintercept = wt))
p + geom_hline(mean_wt,aes(yintercept = wt))
p + geom_hline(aes(yintercept = wt),mean_wt)
ggplot(mtcars, aes(mpg, wt, colour = wt)) +
geom_point() +
geom_hline(aes(yintercept = wt, colour = wt), mean_wt) +
facet_wrap(~ cyl)
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
ggplot(mtcars, aes(mpg, wt, colour = wt)) +
geom_point() +
geom_hline(aes(yintercept = wt, colour = wt), mean_wt) +
facet_wrap(~ cyl)
q()
ggplot(mtcars, aes(mpg, wt, colour = wt)) +
geom_point() +
geom_hline(aes(yintercept = wt, colour = wt), mean_wt) +
facet_wrap(~ cyl)
require(tidyverse)
ggplot(mtcars, aes(mpg, wt, colour = wt)) +
geom_point() +
geom_hline(aes(yintercept = wt, colour = wt), mean_wt) +
facet_wrap(~ cyl)
p + geom_abline(intercept = coef(lm(mpg ~ wt, data = mtcars))[1], slope = coef(lm(mpg ~ wt, data = mtcars))[2])
## Load Libraries
require(tidyverse)
## Create a new ggplot
df = data.frame(gp = factor(rep(letters[1:3],each=10)),
y = rnorm(30))
# ddply - Split data frame, apply function, and return results in a data frame
ds <- plyr::ddply(df, "gp", plyr::summarise, mean = mean(y), sd = sd(y))
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3) +
geom_errorbar(
data = ds,
aes(gp, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'red',
width = 0.2
)
## Abline
p <- ggplot(mtcars, aes(wt, mpg)) + geom_point()
# Fixed values
p + geom_vline(xintercept = 5)
p + geom_vline(xintercept = 1:5)
p + geom_hline(yintercept = mean(mtcars$mpg)) + geom_vline(xintercept = mean(mtcars$wt))
# Calculate slope and intercept of line of best fit
coef(lm(mpg ~ wt, data = mtcars))[2]
#> (Intercept)          wt
#>   37.285126   -5.344472
p + geom_abline(intercept = coef(lm(mpg ~ wt, data = mtcars))[1], slope = coef(lm(mpg ~ wt, data = mtcars))[2])
# Easy to do with geom smooth
p + geom_smooth(method = "lm", se = FALSE)
# To show different lines in different facets, use aesthetics
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
facet_wrap(~ cyl)
mean_wt <- data.frame(cyl = c(4, 6, 8), wt = c(2.28, 3.11, 4.00))
p + geom_hline(aes(yintercept = wt),mean_wt)
# You can also control other aesthetics
ggplot(mtcars, aes(mpg, wt, colour = wt)) +
geom_point() +
geom_hline(aes(yintercept = wt, colour = wt), mean_wt) +
facet_wrap(~ cyl)
p + geom_hline(aes(yintercept = wt),mean_wt)
15 * (95/6)
15 * (5/6)
15 * (5/6) + 15 * (5/6) - 12 * (5/6) * (5/6) -10
15 * (5/6) + 10 * (5/6) - 12 * (5/6) * (5/6) - 10
10 * (5/6) + 15 * (5/6) - 12 * (5/6) * (5/6) - 10
15 * (5/6) + 10 * (5/6) - 12 * (5/6) * (5/6) - 10
Path = as.data.frame(table(a))
## Load Libraries
require(ggplot2)
require(dplyr)
## Set Working Directory
setwd("C:/Users/rahul/Google Drive/RMIT/Semester 2/Data Visualization/Assignment 2")
## Read files
Data2017 = read.csv('data/survey_results_public.csv')
x = filter(Data2017, grepl('Data scientist', DeveloperType))
y = x$HaveWorkedLanguage
z = y
library(stringr)
a = as.vector(str_split_fixed(z, ';', 15))
Path = as.data.frame(table(a))
colnames(Path) = c('Language')
Path.All = transform(Path, Path = reorder(Language))
Path
a = as.vector(str_split_fixed(z, '\\;', 15))
a
Path = as.data.frame(table(a))
colnames(Path) = c('Language')
Path
y = x$HaveWorkedLanguage
z = y
a = as.vector(str_split_fixed(z, '\\;', 15))
a
table(a)
x[x$HaveWorkedLanguage == 'R; Ruby; Scala; SQL; TypeScript; VB.NET; VBA',]
x$HaveWorkedLanguage[x$HaveWorkedLanguage == 'R; Ruby; Scala; SQL; TypeScript; VB.NET; VBA',]
x$HaveWorkedLanguage[x$HaveWorkedLanguage == 'R; Ruby; Scala; SQL; TypeScript; VB.NET; VBA']
x$HaveWorkedLanguage[,x$HaveWorkedLanguage == 'R; Ruby; Scala; SQL; TypeScript; VB.NET; VBA']
x$HaveWorkedLanguage[x$HaveWorkedLanguage == 'R; Ruby; Scala; SQL; TypeScript; VB.NET; VBA',]
x[x$HaveWorkedLanguage == 'R; Ruby; Scala; SQL; TypeScript; VB.NET; VBA',]
aa = x[x$HaveWorkedLanguage == 'R; Ruby; Scala; SQL; TypeScript; VB.NET; VBA',]
View(aa)
barplot(a)
a = as.vector(str_split_fixed(z, '\\;', 15))
a
a = as.data.frame(str_split_fixed(z, '\\;', 15))
a
barplot(a)
View(a)
x[1343:1345,]
x[1344,]
a = as.data.frame(str_split_fixed(z, '\\;', 40))
Path = as.data.frame(table(a))
colnames(Path) = c('Language')
Path.All = transform(Path, Path = reorder(Language))
View(Path)
Path.All = transform(Path, Path = reorder(Language,Frequency))
colnames(Path) = c('Language','Frequency')
Path.All = transform(Path, Path = reorder(Language,Frequency))
View(Path)
Path = trimws(Path)
colnames(Path) = c('Language','Frequency')
Path.All = transform(Path, Path = reorder(Language,Frequency))
Path = trimws(Path)
Path = trimws(Path)
colnames(Path) = c('Language','Frequency')
Path
Path = trim(Path)
trim <- function( x ) {
gsub("(^[[:space:]]+|[[:space:]]+$)", "", x)
}
trim(x)
x$HaveWorkedLanguage = str_trim(x$HaveWorkedDatabase)
z = x$HaveWorkedLanguage
a = as.data.frame(str_split_fixed(z, '\\;', 40))
Path = as.data.frame(table(a))
View(Path)
a = as.data.frame(str_split_fixed(z[1:20,], '\\;', 40))
a = as.data.frame(str_split_fixed(z[1:20], '\\;', 40))
a = as.data.frame(str_split_fixed(z[1:20], '\\;', 40))
Path = as.data.frame(table(a))
View(Path)
